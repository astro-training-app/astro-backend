require('../utils/AppError');

const sendErrorDev = (err, res) => {
    res.status(err.statusCode || 500).json({
      status: err.status || 'error',
      error: err,
      message: err.message,
      stack: err.stack 
    });
  };
  
  // Fonction pour envoyer les erreurs en environnement de production (g√©n√©rique)
  const sendErrorProd = (err, res) => {
    // Erreurs op√©rationnelles (attendues, ex: validation, non trouv√©): envoyer un message clair au client
    if (err.isOperational) {
      res.status(err.statusCode).json({
        status: err.status,
        message: err.message
      });
    }
    // Erreurs de programmation ou inconnues: ne pas fuiter les d√©tails
    else {
      // 1. Logger l'erreur pour les d√©veloppeurs
      console.error('ERREUR üí•', err);
      // 2. Envoyer un message g√©n√©rique au client
      res.status(500).json({
        status: 'error',
        message: 'Quelque chose s\'est tr√®s mal pass√© !' // Message g√©n√©rique
      });
    }
  };
  
  
  // Le gestionnaire d'erreurs global
  module.exports = (err, req, res, next) => {
    // Logique pour d√©finir un statut et un message par d√©faut si non pr√©sents
    err.statusCode = err.statusCode || 500; // 500 Internal Server Error par d√©faut
    err.status = err.status || 'error';
  
    // Diff√©rencier les r√©ponses en fonction de l'environnement
    if (process.env.NODE_ENV === 'production') {
        let error = { ...err, message: err.message }; 

        // Exemple: G√©rer une erreur JWT invalide
         if (error.name === 'JsonWebTokenError') error = new AppError('Token invalide. Veuillez vous reconnecter.', 401);
         // Exemple: G√©rer une erreur JWT expir√©
         if (error.name === 'TokenExpiredError') error = new AppError('Votre session a expir√©. Veuillez vous reconnecter.', 401);
  
  
        sendErrorProd(error, res);
    } else {
      // En d√©veloppement, envoyer des erreurs d√©taill√©es
      sendErrorDev(err, res);
    }
  };